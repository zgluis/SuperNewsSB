//
//  RecentPostsViewController.swift
//  SuperNewsSB
//
//  Created by Luis Zapata on 12-01-20.
//  Copyright (c) 2020 Luis Zapata. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RecentPostsDisplayLogic: class
{
    func displayPosts(viewModel: [PostsModel.Recent.ViewModel.DisplayedPost])
    func endRefreshing()
}

class RecentPostsViewController: UIViewController, RecentPostsDisplayLogic
{
    var interactor: RecentPostsBusinessLogic?
    var router: (NSObjectProtocol & RecentPostsRoutingLogic & RecentPostsDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = RecentPostsInteractor()
        let presenter = RecentPostsPresenter()
        let router = RecentPostsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    var displayedResult: [PostsModel.Recent.ViewModel.DisplayedPost] = []
    @IBOutlet weak var resultTableView: UITableView!
    
    lazy var refreshControl: UIRefreshControl = {
        let refreshControl = UIRefreshControl()
        refreshControl.addTarget(self, action: #selector(handleRefresh(_:)), for: .valueChanged)
        //refreshControl.tintColor = Colors.grey
        return refreshControl
    }()
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        resultTableView.delegate = self
        resultTableView.dataSource = self
        resultTableView.addSubview(refreshControl)
        fetchRecentPosts()
    }
    
    func fetchRecentPosts()
    {
        interactor?.fetchRecentPosts()
    }
    
    @objc func handleRefresh(_ refreshControl: UIRefreshControl) {
        fetchRecentPosts()
    }
    
    func displayPosts(viewModel: [PostsModel.Recent.ViewModel.DisplayedPost])
    {
        displayedResult = viewModel
        DispatchQueue.main.async {
            self.resultTableView.reloadData()
        }
    }
    
    func endRefreshing(){
        if refreshControl.isRefreshing {
            refreshControl.endRefreshing()
        }
    }
}

extension RecentPostsViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let displayedSong = self.displayedResult[indexPath.row]
        let cell = Bundle.main.loadNibNamed("PostCellView", owner: self, options: nil)?.first as! PostCellView
        cell.setData(displayedPost: displayedSong)
        return cell
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayedResult.count
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        router?.routeToPost(url: displayedResult[indexPath.row].storyUrl)
    }
    
    func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {
        return true
    }
    
    func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {
        
        if (editingStyle == .delete) {
            interactor?.removePost(index: indexPath.row, id: displayedResult[indexPath.row].id)
            displayedResult.remove(at: indexPath.row)
            resultTableView.reloadData()
        }
    }
    
}
